[
["rlicense.html", "Chapter 4 Common patterns for licensing R 4.1 R-package 4.2 Shiny Apps 4.3 About contribution 4.4 Documentation", " Chapter 4 Common patterns for licensing R Disclaimer: This book is by no mean a legal book and should not be used as such. This book aims at helping you decipher the complexity of open source licenses, but if you have legal concerns and questions about open source licenses, please refer to a professional lawyer. Show / Hide all code Before examining in more depth the link between your package and it environment, let’s remind that chosing a license is crucial in defining how your package / code can be used and reused. For example, MIT allows to do almost anything with your code (including copying and pasting your code in a paid, commercial, non-open software), while other licenses are less permissive. 4.1 R-package In this first part, we’ll be talking about lincensing R packages. Here are the several cases: All packages need R / I’m making a package that only depends on base I’m creating a package that has dependencies listed in the DESCRIPTION file, that might be installed at the same time as my package I’m creating a package that has dependencies on internal files that are fully copied and pasted I’m creating a package designed to access data 4.1.1 R &amp; {base} All packages need R / I’m making a package that only depends on base Do you need to have a GPL-compatible license? That’s a question your law department should answer, but here is the part from the GNU FAQ that might help you get an answer. In the GPL FAQ, “Can I apply the GPL when writing a plug-in for a nonfree program?”, the FSF states that : If the main program and the plugins are a single combined program then this means you must license the plug-in under the GPL or a GPL-compatible free software license and distribute it with source code in a GPL-compliant way. A main program that is separate from its plug-ins makes no requirements for the plug-ins. Note also that CRAN allows packages that are licensed under a non GPL-compatible license: for example, Artistic License 1.0 or Common Public License Version 1.0, or the Lucent Public License full_db %&gt;% filter(str_detect(license, &quot;Artistic-1&quot;)) %&gt;% select(package, license) full_db %&gt;% filter(str_detect(license, &quot;Common Public License Version 1.0&quot;)) %&gt;% select(package, license) full_db %&gt;% filter(str_detect(license, &quot;Lucent&quot;)) %&gt;% select(package, license) The CRAN policies states: Packages with licenses not listed at https://svn.r-project.org/R/trunk/share/licenses/license.db will generally not be accepted. Here is the list of these licenses: download.file(&quot;https://svn.r-project.org/R/trunk/share/licenses/license.db&quot;, &quot;licenses.dcf&quot;) cran_l &lt;- read.dcf(&quot;licenses.dcf&quot;) %&gt;% as_tibble() %&gt;% select(Name, Abbrev, Version) unlink(&quot;licenses.dcf&quot;) Note that these 39 licenses are more than the 11 licenses officially listed on the r-project, and that some of these are not GPL-Compatible (for example Artistic License 1.0 or European Union Public License (EUPL) version 1.1) Some other licenses are accepted, for example the “Unlimited” license: full_db %&gt;% filter(str_detect(license, &quot;Unlimited&quot;)) %&gt;% select(package, license) We can also find this restriction concerning licensing of package in the CRAN policies: The package’s license must give the right for CRAN to distribute the package in perpetuity. .right{ text-align: right;} CRAN Repository Policy 4.1.2 Dependencies in DESCRIPTION There are three ways you can list package dependencies in the DESCRIPTION: Depends: the package is installed at the same time as your package, and it is loaded (attached to your search path) when you load your package. For example, the {ggraph} package has listed in Depends the {ggplot2} package, so when you do library(ggraph), it also attach {ggplot2} to the searchPath. Imports: the package is installed at the same time as your package, and it is not loaded (attached to your search path) when you load your package. Yet you can use the functions from the package you’ve listed in your NAMESPACE. For example, the {ggraph} package has listed in Depends the {Rcpp} package. But when you do library(ggraph), {Rcpp} is not attached to your searchPath. Note that here, both {Rcpp} and {ggplot2} are installed when you install {ggraph}. Suggests: the package is not installed at the same time as your package, and it is not loaded (attached to your search path) when you load your package. For example, the {ggraph} package has listed in Suggests the {network} package. We will not classify each of this behavior, but be aware of these three behaviors, and wether or not they classify as one or two programs, or wether or not your package us a modified work of the dependencies is very much subject to interpretation and of the level of interactions between the packages. That being said, we can assume that at least Depends and Imports do dynamic linking, as defined as the executable The executable here being the package code still contains undefined symbols, plus a list of objects or libraries that will provide definitions for these. Loading the program will load these objects/libraries as well, and perform a final linking. https://en.wikipedia.org/wiki/Linker_(computing)#Dynamic_linking) And remember that this is the statement from the GPL FAQ about dynamic linking: Linking a GPL covered work&quot;, statically or dynamically with other modules is making a combined work based on the GPL covered work. Thus, the terms and conditions of the GNU General Public License cover the whole combination. On a more pragmatic level, let’s think for a minute about using a dependency which has restrictions, like one with the ACM license, preventing from any commercial use without explicit consent from the author. If one of these packages is listed in Depends or Imports, it will be installed with your package, and elements of the NAMESPACE of this package will be used when your package is used. So this kind of dependency mught be problematic if you choose to go for a more lax license. For example, MIT allows to make commercial use of your code. And it might be understood that allowing your code to be used anywhere would contradict the restriction imposed by one of the needed dependencies. 4.1.3 Including someone else’s code I’m creating a package that has dependencies on internal files that are fully copied and pasted Including someone else’s code can cover several things: adding a C file which is compiled with the package adding a piece of R code from another package adding code in another language It’s a little bit more clear that you are doing static linking therre: Static linking is the result of the linker copying all library routines used in the program into the executable image. https://en.wikipedia.org/wiki/Linker_(computing)#Static_linking) As you are copying and pasting code from one work into yours, it’s more clear that you are doing static linking. Here, you should respect the license under which the code you’re using is licensed. For example, MIT allows to freely reused the code Where code is copied (or derived) from the work of others (including from R itself), care must be taken that any copyright/license statements are preserved and authorship is not misrepresented. .right{ text-align: right;} CRAN Repository Policy Be careful: the constant in almost every open source licenses is that you should add the disclaimer of non liability in the code you’re using. So if ever you are using another library, don’t forget to add in your license file what library you are using, and what the license of this specific piece of code is. 4.1.3.1 Bundling JavaScript files These files are used at running time, they are not compiled when the package is installed. the {leaflet} package: https://github.com/rstudio/leaflet This package, designed to do interactive cartography, bundles a series of JavaScript files inside it, not written by the author of the R package. The license of the package is GPL-3, and it is combined with a LICENSE.note file, which starts as such: The leaflet package as a whole is distributed under GPL-3 (GNU GENERAL PUBLIC LICENSE version 3). The leaflet package includes other open source software components. The following is a list of these components (full copies of the license agreements used by these components are included below): And then you’ll find a list of all the licenses for the various elements to be found in the package. Also, the list of all authors from the various external elements is to be found in the DESCRIPTION cat(packageDescription(&quot;leaflet&quot;)[[&quot;Author&quot;]]) ## Joe Cheng [aut, cre], ## Bhaskar Karambelkar [aut], ## Yihui Xie [aut], ## Hadley Wickham [ctb], ## Kenton Russell [ctb], ## Kent Johnson [ctb], ## Barret Schloerke [ctb], ## jQuery Foundation and contributors [ctb, cph] (jQuery library), ## Vladimir Agafonkin [ctb, cph] (Leaflet library), ## CloudMade [cph] (Leaflet library), ## Leaflet contributors [ctb] (Leaflet library), ## Leaflet Providers contributors [ctb, cph] (Leaflet Providers plugin), ## Brandon Copeland [ctb, cph] (leaflet-measure plugin), ## Joerg Dietrich [ctb, cph] (Leaflet.Terminator plugin), ## Benjamin Becquet [ctb, cph] (Leaflet.MagnifyingGlass plugin), ## Norkart AS [ctb, cph] (Leaflet.MiniMap plugin), ## L. Voogdt [ctb, cph] (Leaflet.awesome-markers plugin), ## Daniel Montague [ctb, cph] (Leaflet.EasyButton plugin), ## Kartena AB [ctb, cph] (Proj4Leaflet plugin), ## Robert Kajic [ctb, cph] (leaflet-locationfilter plugin), ## Mapbox [ctb, cph] (leaflet-omnivore plugin), ## Michael Bostock [ctb, cph] (topojson), ## RStudio [cph] 4.1.3.2 Bundling C / C++ / Fortran files This format of file is a little bit different as it compiles the files when the package is installed. In other word, they are not “external calls”, they become a core of the resulting R package. This is for example what we’ve seen with the {rngwell19937} package in the previous chapter: readLines( system.file(&quot;LICENSE&quot;, package = &quot;rngwell19937&quot;) ) %&gt;% glue::as_glue() ## This code can be used freely for personal, academic, or non-commercial purposes. ## ## For commercial purposes, see the conditions formulated in file rngwell19937/src/WELL19937a.c. This .c file starting with: download.file(&quot;https://cran.r-project.org/src/contrib/gpclib_1.5-5.tar.gz&quot;, &quot;gpclib.tar.gz&quot;) untar(&quot;gpclib.tar.gz&quot;) readLines( &quot;gpclib/src/gpc.c&quot; )[1:30] %&gt;% glue::as_glue() ## /* ## =========================================================================== ## ## Project: Generic Polygon Clipper ## ## A new algorithm for calculating the difference, intersection, ## exclusive-or or union of arbitrary polygon sets. ## ## File: gpc.c ## Author: Alan Murta (email: gpc@cs.man.ac.uk) ## Version: 2.32 ## Date: 17th December 2004 ## ## Copyright: (C) 1997-2004, Advanced Interfaces Group, ## University of Manchester. ## ## This software is free for non-commercial use. It may be copied, ## modified, and redistributed provided that this copyright notice ## is preserved on all copies. The intellectual property rights of ## the algorithms used reside with the University of Manchester ## Advanced Interfaces Group. ## ## You may not use this software, in whole or in part, in support ## of any commercial product without the express consent of the ## author. ## ## There is no warranty or other guarantee of fitness of this ## software for any purpose. It is provided solely &quot;as is&quot;. ## ## =========================================================================== unlink(&quot;gpclib.tar.gz&quot;) unlink(&quot;gpclib&quot;, recursive = TRUE) 4.1.4 Data package How to license a data package? In this GitHub issue, we can find three common patterns for building a data package: data bundled inside the package, data accessed through an API, data access for files that are online but not through an API. 4.1.4.1 Data bundled inside the package This kind of behavior is close to the one from package bundling code written by someone else: if you’re packing data inside a package, then the global package should be compatible with the license of the dataset. Including a dataset inside a package that has a non compatible license can create breaking changes where you have to either remove the dataset from the package, or switch the package license. This is for example what happened with the {tidytext} package - when first writting the package, Julia Silge and David Robinson included several datasets, and released the package as MIT. We used the knowledge we had at the time and followed the practices we saw other OSS packages for text analysis following. However, it turns out that this was not the right approach from a licensing standpoint, because the lexicon licenses were not the same as the package’s license .right{ text-align: right;} Fixing your Mistakes: Sentiment Analysis Edition So what to do next? As Julia describes in her blogpost, she reached out to every dataset author to get there authorization (or not) to use the dataset in an MIT licensed package : So, where does that leave us? The sentiment lexicon of Bing Liu and collaborators is still a dataset within tidytext, as he has explicitly given permission for us to include it there. If you need a sentiment lexicon to use in another R package, this is the easiest one to use. The AFINN lexicon is available through textdata, under an OSS license different from tidytext’s license. The sentiment lexicon of Loughran and McDonald for financial documents is available through textdata for research purposes, but you must obtain a license from the creators for commercial use. The NRC lexicon is currently not available through any package I am involved in. .right{ text-align: right;} Fixing your Mistakes: Sentiment Analysis Edition So to sum up, two datasets have switched to the {textdata} package (see next section), one is still in {tidytext} as the author has explicitely given the authorization to do so, and one is not available. Another example, the {igraphdata}, which is released under XX and has a file LICENSE with each licenses for each dataset listed: readLines( system.file(&quot;LICENSE&quot;, package = &quot;igraphdata&quot;) ) %&gt;% glue::as_glue() ## This files lists the copyright holders and licenses (if known) of the ## various data sets in the igraphdata package: ## ## Koenigsberg ## ----------- ## ## This data set was collected from Public Domain sources, and it is ## int the Public Domain itself. ## ## Please cite the following publication if you use this data set: ## ## Euler, L.: Solutio problematis ad geometriam situs pertinentis. ## Commentarii academiae scientiarum Petropolitanae, 128-140, 1741. ## ## ## UKfaculty ## --------- ## ## This dataset is licensed under a Creative Commons ## Attribution-Share Alike 2.0 UK: England &amp; Wales License, ## see http://creativecommons.org/licenses/by-sa/2.0/uk/ for details. ## ## Please cite the following reference if you use this dataset: ## ## Nepusz T., Petróczi A., Négyessy L., Bazsó F.: Fuzzy communities and ## the concept of bridgeness in complex networks. Physical Review E ## 77:016107, 2008. ## ## USairports ## ---------- ## ## The data is from the Research and Innovative Technology Administration, ## and it is in the Public Domain. ## ## enron ## ----- ## ## The data was downloaded from http://www.cis.jhu.edu/~parky/Enron/ ## Please cite the appropriate paper (see the manual) if you use ## this data set. ## ## foodwebs ## -------- ## ## The data was downloaded from ## http://vlado.fmf.uni-lj.si/pub/networks/data/bio/foodweb/foodweb.htm ## Please see the manual page of the data set for the publications ## that you should cite, if you use some of this data. ## ## immuno ## ------ ## ## The data was collected by David Gfeller. Please cite his PhD thesis if ## you use this data set: ## ## D. Gfeller, Simplifying complex networks: from a clustering to a ## coarse graining strategy, \\emph{PhD Thesis EPFL}, no 3888, 2007. ## http://library.epfl.ch/theses/?nr=3888 ## ## karate ## ------ ## ## The data was extracted from the original publication. ## Please cite: ## ## Wayne W. Zachary. An Information Flow Model for Conflict and ## Fission in Small Groups. Journal of Anthropological Research ## Vol. 33, No. 4 452-473 ## ## kite ## ---- ## ## The data set was extracted from the publication. Please cite: ## ## David Krackhardt: Assessing the Political Landscape: Structure, Cognition, ## and Power in Organizations. Admin. Sci. Quart. 35, 342-369, 1990. ## ## macaque ## ------- ## ## This dataset is licensed under a Creative Commons ## Attribution-Share Alike 2.0 UK: England &amp; Wales License, ## see http://creativecommons.org/licenses/by-sa/2.0/uk/ for details. ## ## Please cite the following reference if you use this dataset: ## ## Négyessy L., Nepusz T., Kocsis L., Bazsó F.: Prediction of the main ## cortical areas and connections involved in the tactile function of the ## visual cortex by network analysis. European Journal of Neuroscience ## 23(7):1919–1930, 2006. ## ## rfid ## ---- ## ## This data set is licensed under a GPL v3 license. ## ## Please cite the following reference if you use this dataset: ## ## P. Vanhems, A. Barrat, C. Cattuto, J.-F. Pinton, N. Khanafer, ## C. Regis, B.-a. Kim, B. Comte, N. Voirin: Estimating potential ## infection transmission routes in hospital wards using wearable ## proximity sensors. PloS One 8(9), e73970 306 (2013). ## ## yeast ## ----- ## ## The data was downloaded from ## http://www.nature.com/nature/journal/v417/n6887/suppinfo/nature750.html ## ## Please cite the following paper if you use this data set: ## ## Comparative assessment of large-scale data sets of protein-protein ## interactions. Christian von Mering, Roland Krause, Berend Snel, ## Michael Cornell, Stephen G. Oliver, Stanley Fields and Peer Bork. ## Nature 417, 399-403 (2002) https://github.com/ropensci/unconf17/issues/61 https://github.com/ropenscilabs/data-packages 4.1.4.2 Data access for files that are online A way to be able to serve data in a package is to choose a strategy used in the {textdata} package. The package by itself doesn’t include any dataset, yet whenever you want to use one of this dataset, you are prompted to accept the license of each dataset. https://github.com/ropensci/unconf17/issues/61 https://github.com/ropenscilabs/data-packages 4.1.4.3 Data accessed through an API It’s reasonable to think that accessing data through an API enters covers the same pattern as {textdata} does: the package does not carry the data, but it allows to connect to it and to transfer it. Althought, even if you don’t get the data with the package, using these data is covered by the 4.2 Shiny Apps 4.3 About contribution Discussion here about contribution to your package. -asking people to sign a CLA - https://github.com/ropensci/unconf17/issues/32#issuecomment-294038058 implication for changing license ({covr} example) 4.4 Documentation 4.4.1 Software documentation Discussion about code documentation (vignette, bookdown, blog articles…) 4.4.2 Publication Overview of license requirements (if any) for publication in journals. Example: JSS “Code needs to include the GNU General Public Licence (GPL), versions GPL-2 or GPL-3, or a GPL-compatible license for publication in JSS.” https://www.jstatsoft.org/pages/view/authors 4.4.3 Online content https://stackoverflow.com/help/licensing "]
]
